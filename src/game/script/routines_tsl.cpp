/*
 * Copyright (c) 2020 The reone project contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "routines.h"

using namespace std;
using namespace std::placeholders;

using namespace reone::script;

namespace reone {

namespace game {

#define Void VariableType::Void
#define Int VariableType::Int
#define Float VariableType::Float
#define Object VariableType::Object
#define String VariableType::String
#define Effect VariableType::Effect
#define Event VariableType::Event
#define Location VariableType::Location
#define Talent VariableType::Talent
#define TVector VariableType::Vector
#define Action VariableType::Action

void Routines::addTslRoutines() {
    add("Random", Int, { Int }, bind(&Routines::random, this, _1, _2));
    add("PrintString", Void, { String }, bind(&Routines::printString, this, _1, _2));
    add("PrintFloat", Void, { Float, Int, Int }, bind(&Routines::printFloat, this, _1, _2));
    add("FloatToString", String, { Float, Int, Int }, bind(&Routines::floatToString, this, _1, _2));
    add("PrintInteger", Void, { Int }, bind(&Routines::printInteger, this, _1, _2));
    add("PrintObject", Void, { Object }, bind(&Routines::printObject, this, _1, _2));
    add("AssignCommand", Void, { Object, Action }, bind(&Routines::assignCommand, this, _1, _2));
    add("DelayCommand", Void, { Float, Action }, bind(&Routines::delayCommand, this, _1, _2));
    add("ExecuteScript", Void, { String, Object, Int }, bind(&Routines::executeScript, this, _1, _2));
    add("ClearAllActions", Void, { }, bind(&Routines::clearAllActions, this, _1, _2));
    add("SetFacing", Void, { Float });
    add("SwitchPlayerCharacter", Int, { Int });
    add("SetTime", Void, { Int, Int, Int, Int });
    add("SetPartyLeader", Int, { Int }, bind(&Routines::setPartyLeader, this, _1, _2));
    add("SetAreaUnescapable", Void, { Int });
    add("GetAreaUnescapable", Int, { });
    add("GetTimeHour", Int, { });
    add("GetTimeMinute", Int, { });
    add("GetTimeSecond", Int, { });
    add("GetTimeMillisecond", Int, { });
    add("ActionRandomWalk", Void, { });
    add("ActionMoveToLocation", Void, { Location, Int });
    add("ActionMoveToObject", Void, { Object, Int, Float }, bind(&Routines::actionMoveToObject, this, _1, _2));
    add("ActionMoveAwayFromObject", Void, { Object, Int, Float });
    add("GetArea", Object, { Object }, bind(&Routines::getArea, this, _1, _2));
    add("GetEnteringObject", Object, { }, bind(&Routines::getEnteringObject, this, _1, _2));
    add("GetExitingObject", Object, { }, bind(&Routines::getExitingObject, this, _1, _2));
    add("GetPosition", TVector, { Object }, bind(&Routines::getPosition, this, _1, _2));
    add("GetFacing", Float, { Object }, bind(&Routines::getFacing, this, _1, _2));
    add("GetItemPossessor", Object, { Object });
    add("GetItemPossessedBy", Object, { Object, String });
    add("CreateItemOnObject", Object, { String, Object, Int, Int }, bind(&Routines::createItemOnObject, this, _1, _2));
    add("ActionEquipItem", Void, { Object, Int, Int });
    add("ActionUnequipItem", Void, { Object, Int });
    add("ActionPickUpItem", Void, { Object });
    add("ActionPutDownItem", Void, { Object });
    add("GetLastAttacker", Object, { Object });
    add("ActionAttack", Void, { Object, Int });
    add("GetNearestCreature", Object, { Int, Int, Object, Int, Int, Int, Int, Int });
    add("ActionSpeakString", Void, { String, Int });
    add("ActionPlayAnimation", Void, { Int, Float, Float });
    add("GetDistanceToObject", Float, { Object }, bind(&Routines::getDistanceToObject, this, _1, _2));
    add("GetIsObjectValid", Int, { Object }, bind(&Routines::getIsObjectValid, this, _1, _2));
    add("ActionOpenDoor", Void, { Object }, bind(&Routines::actionOpenDoor, this, _1, _2));
    add("ActionCloseDoor", Void, { Object }, bind(&Routines::actionCloseDoor, this, _1, _2));
    add("SetCameraFacing", Void, { Float });
    add("PlaySound", Void, { String });
    add("GetSpellTargetObject", Object, { });
    add("ActionCastSpellAtObject", Void, { Int, Object, Int, Int, Int, Int, Int });
    add("GetCurrentHitPoints", Int, { Object }, bind(&Routines::getCurrentHitPoints, this, _1, _2));
    add("GetMaxHitPoints", Int, { Object }, bind(&Routines::getMaxHitPoints, this, _1, _2));
    add("EffectAssuredHit", Effect, { }, bind(&Routines::effectAssuredHit, this, _1, _2));
    add("GetLastItemEquipped", Object, { });
    add("GetSubScreenID", Int, { });
    add("CancelCombat", Void, { Object });
    add("GetCurrentForcePoints", Int, { Object });
    add("GetMaxForcePoints", Int, { Object });
    add("PauseGame", Void, { Int });
    add("SetPlayerRestrictMode", Void, { Int });
    add("GetStringLength", Int, { String }, bind(&Routines::getStringLength, this, _1, _2));
    add("GetStringUpperCase", String, { String }, bind(&Routines::getStringUpperCase, this, _1, _2));
    add("GetStringLowerCase", String, { String }, bind(&Routines::getStringLowerCase, this, _1, _2));
    add("GetStringRight", String, { String, Int }, bind(&Routines::getStringRight, this, _1, _2));
    add("GetStringLeft", String, { String, Int }, bind(&Routines::getStringLeft, this, _1, _2));
    add("InsertString", String, { String, String, Int }, bind(&Routines::insertString, this, _1, _2));
    add("GetSubString", String, { String, Int, Int }, bind(&Routines::getSubString, this, _1, _2));
    add("FindSubString", Int, { String, String }, bind(&Routines::findSubString, this, _1, _2));
    add("fabs", Float, { Float }, bind(&Routines::fabs, this, _1, _2));
    add("cos", Float, { Float }, bind(&Routines::cos, this, _1, _2));
    add("sin", Float, { Float }, bind(&Routines::sin, this, _1, _2));
    add("tan", Float, { Float }, bind(&Routines::tan, this, _1, _2));
    add("acos", Float, { Float }, bind(&Routines::acos, this, _1, _2));
    add("asin", Float, { Float }, bind(&Routines::asin, this, _1, _2));
    add("atan", Float, { Float }, bind(&Routines::atan, this, _1, _2));
    add("log", Float, { Float }, bind(&Routines::log, this, _1, _2));
    add("pow", Float, { Float, Float }, bind(&Routines::pow, this, _1, _2));
    add("sqrt", Float, { Float }, bind(&Routines::sqrt, this, _1, _2));
    add("abs", Int, { Int }, bind(&Routines::abs, this, _1, _2));
    add("EffectHeal", Effect, { Int }, bind(&Routines::effectHeal, this, _1, _2));
    add("EffectDamage", Effect, { Int, Int, Int }, bind(&Routines::effectDamage, this, _1, _2));
    add("EffectAbilityIncrease", Effect, { Int, Int }, bind(&Routines::effectAbilityIncrease, this, _1, _2));
    add("EffectDamageResistance", Effect, { Int, Int, Int }, bind(&Routines::effectDamageResistance, this, _1, _2));
    add("EffectResurrection", Effect, { Int }, bind(&Routines::effectResurrection, this, _1, _2));
    add("GetPlayerRestrictMode", Int, { Object });
    add("GetCasterLevel", Int, { Object });
    add("GetFirstEffect", Effect, { Object });
    add("GetNextEffect", Effect, { Object });
    add("RemoveEffect", Void, { Object, Effect });
    add("GetIsEffectValid", Int, { Effect });
    add("GetEffectDurationType", Int, { Effect });
    add("GetEffectSubType", Int, { Effect });
    add("GetEffectCreator", Object, { Effect });
    add("IntToString", String, { Int }, bind(&Routines::intToString, this, _1, _2));
    add("GetFirstObjectInArea", Object, { Object, Int });
    add("GetNextObjectInArea", Object, { Object, Int });
    add("d2", Int, { Int }, bind(&Routines::d2, this, _1, _2));
    add("d3", Int, { Int }, bind(&Routines::d3, this, _1, _2));
    add("d4", Int, { Int }, bind(&Routines::d4, this, _1, _2));
    add("d6", Int, { Int }, bind(&Routines::d6, this, _1, _2));
    add("d8", Int, { Int }, bind(&Routines::d8, this, _1, _2));
    add("d10", Int, { Int }, bind(&Routines::d10, this, _1, _2));
    add("d12", Int, { Int }, bind(&Routines::d12, this, _1, _2));
    add("d20", Int, { Int }, bind(&Routines::d20, this, _1, _2));
    add("d100", Int, { Int }, bind(&Routines::d100, this, _1, _2));
    add("VectorMagnitude", Float, { TVector }, bind(&Routines::vectorMagnitude, this, _1, _2));
    add("GetMetaMagicFeat", Int, { });
    add("GetObjectType", Int, { Object });
    add("GetRacialType", Int, { Object });
    add("FortitudeSave", Int, { Object, Int, Int, Object });
    add("ReflexSave", Int, { Object, Int, Int, Object });
    add("WillSave", Int, { Object, Int, Int, Object });
    add("GetSpellSaveDC", Int, { });
    add("MagicalEffect", Effect, { Effect });
    add("SupernaturalEffect", Effect, { Effect });
    add("ExtraordinaryEffect", Effect, { Effect });
    add("EffectACIncrease", Effect, { Int, Int, Int }, bind(&Routines::effectACIncrease, this, _1, _2));
    add("GetAC", Int, { Object, Int });
    add("EffectSavingThrowIncrease", Effect, { Int, Int, Int }, bind(&Routines::effectSavingThrowIncrease, this, _1, _2));
    add("EffectAttackIncrease", Effect, { Int, Int }, bind(&Routines::effectAttackIncrease, this, _1, _2));
    add("EffectDamageReduction", Effect, { Int, Int, Int }, bind(&Routines::effectDamageReduction, this, _1, _2));
    add("EffectDamageIncrease", Effect, { Int, Int }, bind(&Routines::effectDamageIncrease, this, _1, _2));
    add("RoundsToSeconds", Float, { Int }, bind(&Routines::roundsToSeconds, this, _1, _2));
    add("HoursToSeconds", Float, { Int }, bind(&Routines::hoursToSeconds, this, _1, _2));
    add("TurnsToSeconds", Float, { Int }, bind(&Routines::turnsToSeconds, this, _1, _2));
    add("SoundObjectSetFixedVariance", Void, { Object, Float });
    add("GetGoodEvilValue", Int, { Object });
    add("GetPartyMemberCount", Int, { }, bind(&Routines::getPartyMemberCount, this, _1, _2));
    add("GetAlignmentGoodEvil", Int, { Object });
    add("GetFirstObjectInShape", Object, { Int, Float, Location, Int, Int, TVector });
    add("GetNextObjectInShape", Object, { Int, Float, Location, Int, Int, TVector });
    add("EffectEntangle", Effect, { }, bind(&Routines::effectEntangle, this, _1, _2));
    add("SignalEvent", Void, { Object, Event }, bind(&Routines::signalEvent, this, _1, _2));
    add("EventUserDefined", Event, { Int }, bind(&Routines::eventUserDefined, this, _1, _2));
    add("EffectDeath", Effect, { Int, Int, Int }, bind(&Routines::effectDeath, this, _1, _2));
    add("EffectKnockdown", Effect, { }, bind(&Routines::effectKnockdown, this, _1, _2));
    add("ActionGiveItem", Void, { Object, Object });
    add("ActionTakeItem", Void, { Object, Object });
    add("VectorNormalize", TVector, { TVector }, bind(&Routines::vectorNormalize, this, _1, _2));
    add("GetItemStackSize", Int, { Object }, bind(&Routines::getItemStackSize, this, _1, _2));
    add("GetAbilityScore", Int, { Object, Int }, bind(&Routines::getAbilityScore, this, _1, _2));
    add("GetIsDead", Int, { Object }, bind(&Routines::getIsDead, this, _1, _2));
    add("PrintVector", Void, { TVector, Int }, bind(&Routines::printVector, this, _1, _2));
    add("Vector", TVector, { Float, Float, Float }, bind(&Routines::vectorCreate, this, _1, _2));
    add("SetFacingPoint", Void, { TVector });
    add("AngleToVector", TVector, { Float });
    add("VectorToAngle", Float, { TVector });
    add("TouchAttackMelee", Int, { Object, Int });
    add("TouchAttackRanged", Int, { Object, Int });
    add("EffectParalyze", Effect, { }, bind(&Routines::effectParalyze, this, _1, _2));
    add("EffectSpellImmunity", Effect, { Int }, bind(&Routines::effectSpellImmunity, this, _1, _2));
    add("SetItemStackSize", Void, { Object, Int }, bind(&Routines::setItemStackSize, this, _1, _2));
    add("GetDistanceBetween", Float, { Object, Object }, bind(&Routines::getDistanceBetween, this, _1, _2));
    add("SetReturnStrref", Void, { Int, Int, Int });
    add("EffectForceJump", Effect, { Object, Int }, bind(&Routines::effectForceJump, this, _1, _2));
    add("EffectSleep", Effect, { }, bind(&Routines::effectSleep, this, _1, _2));
    add("GetItemInSlot", Object, { Int, Object }, bind(&Routines::getItemInSlot, this, _1, _2));
    add("EffectTemporaryForcePoints", Effect, { Int }, bind(&Routines::effectTemporaryForcePoints, this, _1, _2));
    add("EffectConfused", Effect, { }, bind(&Routines::effectConfused, this, _1, _2));
    add("EffectFrightened", Effect, { }, bind(&Routines::effectFrightened, this, _1, _2));
    add("EffectChoke", Effect, { }, bind(&Routines::effectChoke, this, _1, _2));
    add("SetGlobalString", Void, { String, String }, bind(&Routines::setGlobalString, this, _1, _2));
    add("EffectStunned", Effect, { }, bind(&Routines::effectStunned, this, _1, _2));
    add("SetCommandable", Void, { Int, Object });
    add("GetCommandable", Int, { Object });
    add("EffectRegenerate", Effect, { Int, Float }, bind(&Routines::effectRegenerate, this, _1, _2));
    add("EffectMovementSpeedIncrease", Effect, { Int }, bind(&Routines::effectMovementSpeedIncrease, this, _1, _2));
    add("GetHitDice", Int, { Object }, bind(&Routines::getHitDice, this, _1, _2));
    add("ActionForceFollowObject", Void, { Object, Float });
    add("GetTag", String, { Object }, bind(&Routines::getTag, this, _1, _2));
    add("ResistForce", Int, { Object, Object });
    add("GetEffectType", Int, { Effect });
    add("EffectAreaOfEffect", Effect, { Int, String, String, String }, bind(&Routines::effectAreaOfEffect, this, _1, _2));
    add("GetFactionEqual", Int, { Object, Object }, bind(&Routines::getFactionEqual, this, _1, _2));
    add("ChangeFaction", Void, { Object, Object }, bind(&Routines::changeFaction, this, _1, _2));
    add("GetIsListening", Int, { Object });
    add("SetListening", Void, { Object, Int });
    add("SetListenPattern", Void, { Object, String, Int });
    add("TestStringAgainstPattern", Int, { String, String });
    add("GetMatchedSubstring", String, { Int });
    add("GetMatchedSubstringsCount", Int, { });
    add("EffectVisualEffect", Effect, { Int, Int }, bind(&Routines::effectVisualEffect, this, _1, _2));
    add("GetFactionWeakestMember", Object, { Object, Int });
    add("GetFactionStrongestMember", Object, { Object, Int });
    add("GetFactionMostDamagedMember", Object, { Object, Int });
    add("GetFactionLeastDamagedMember", Object, { Object, Int });
    add("GetFactionGold", Int, { Object });
    add("GetFactionAverageReputation", Int, { Object, Object });
    add("GetFactionAverageGoodEvilAlignment", Int, { Object });
    add("SoundObjectGetFixedVariance", Float, { Object });
    add("GetFactionAverageLevel", Int, { Object });
    add("GetFactionAverageXP", Int, { Object });
    add("GetFactionMostFrequentClass", Int, { Object });
    add("GetFactionWorstAC", Object, { Object, Int });
    add("GetFactionBestAC", Object, { Object, Int });
    add("GetGlobalString", String, { String }, bind(&Routines::getGlobalString, this, _1, _2));
    add("GetListenPatternNumber", Int, { });
    add("ActionJumpToObject", Void, { Object, Int }, bind(&Routines::actionJumpToObject, this, _1, _2));
    add("GetWaypointByTag", Object, { String }, bind(&Routines::getWaypointByTag, this, _1, _2));
    add("GetTransitionTarget", Object, { Object });
    add("EffectLinkEffects", Effect, { Effect, Effect }, bind(&Routines::effectLinkEffects, this, _1, _2));
    add("GetObjectByTag", Object, { String, Int }, bind(&Routines::getObjectByTag, this, _1, _2));
    add("AdjustAlignment", Void, { Object, Int, Int, Int });
    add("ActionWait", Void, { Float });
    add("SetAreaTransitionBMP", Void, { Int, String });
    add("ActionStartConversation", Void, { Object, String, Int, Int, Int, String, String, String, String, String, String, Int, Int, Int, Int }, bind(&Routines::actionStartConversation, this, _1, _2));
    add("ActionPauseConversation", Void, { }, bind(&Routines::actionPauseConversation, this, _1, _2));
    add("ActionResumeConversation", Void, { }, bind(&Routines::actionResumeConversation, this, _1, _2));
    add("EffectBeam", Effect, { Int, Object, Int, Int }, bind(&Routines::effectBeam, this, _1, _2));
    add("GetReputation", Int, { Object, Object });
    add("AdjustReputation", Void, { Object, Object, Int });
    add("GetModuleFileName", String, { });
    add("GetGoingToBeAttackedBy", Object, { Object });
    add("EffectForceResistanceIncrease", Effect, { Int }, bind(&Routines::effectForceResistanceIncrease, this, _1, _2));
    add("GetLocation", Location, { Object }, bind(&Routines::getLocation, this, _1, _2));
    add("ActionJumpToLocation", Void, { Location }, bind(&Routines::actionJumpToLocation, this, _1, _2));
    add("Location", Location, { TVector, Float }, bind(&Routines::location, this, _1, _2));
    add("ApplyEffectAtLocation", Void, { Int, Effect, Location, Float });
    add("GetIsPC", Int, { Object }, bind(&Routines::getIsPC, this, _1, _2));
    add("FeetToMeters", Float, { Float }, bind(&Routines::feetToMeters, this, _1, _2));
    add("YardsToMeters", Float, { Float }, bind(&Routines::yardsToMeters, this, _1, _2));
    add("ApplyEffectToObject", Void, { Int, Effect, Object, Float });
    add("SpeakString", Void, { String, Int });
    add("GetSpellTargetLocation", Location, { });
    add("GetPositionFromLocation", TVector, { Location }, bind(&Routines::getPositionFromLocation, this, _1, _2));
    add("EffectBodyFuel", Effect, { }, bind(&Routines::effectBodyFuel, this, _1, _2));
    add("GetFacingFromLocation", Float, { Location }, bind(&Routines::getFacingFromLocation, this, _1, _2));
    add("GetNearestCreatureToLocation", Object, { Int, Int, Location, Int, Int, Int, Int, Int });
    add("GetNearestObject", Object, { Int, Object, Int });
    add("GetNearestObjectToLocation", Object, { Int, Location, Int });
    add("GetNearestObjectByTag", Object, { String, Object, Int });
    add("IntToFloat", Float, { Int }, bind(&Routines::intToFloat, this, _1, _2));
    add("FloatToInt", Int, { Float }, bind(&Routines::floatToInt, this, _1, _2));
    add("StringToInt", Int, { String }, bind(&Routines::stringToInt, this, _1, _2));
    add("StringToFloat", Float, { String }, bind(&Routines::stringToFloat, this, _1, _2));
    add("ActionCastSpellAtLocation", Void, { Int, Location, Int, Int, Int, Int });
    add("GetIsEnemy", Int, { Object, Object }, bind(&Routines::getIsEnemy, this, _1, _2));
    add("GetIsFriend", Int, { Object, Object }, bind(&Routines::getIsFriend, this, _1, _2));
    add("GetIsNeutral", Int, { Object, Object }, bind(&Routines::getIsNeutral, this, _1, _2));
    add("GetPCSpeaker", Object, { }, bind(&Routines::getPCSpeaker, this, _1, _2));
    add("GetStringByStrRef", String, { Int }, bind(&Routines::getStringByStrRef, this, _1, _2));
    add("ActionSpeakStringByStrRef", Void, { Int, Int });
    add("DestroyObject", Void, { Object, Float, Int, Float, Int }, bind(&Routines::destroyObject, this, _1, _2));
    add("GetModule", Object, { }, bind(&Routines::getModule, this, _1, _2));
    add("CreateObject", Object, { Int, String, Location, Int });
    add("EventSpellCastAt", Event, { Object, Int, Int });
    add("GetLastSpellCaster", Object, { });
    add("GetLastSpell", Int, { });
    add("GetUserDefinedEventNumber", Int, { }, bind(&Routines::getUserDefinedEventNumber, this, _1, _2));
    add("GetSpellId", Int, { });
    add("RandomName", String, { });
    add("EffectPoison", Effect, { Int }, bind(&Routines::effectPoison, this, _1, _2));
    add("GetLoadFromSaveGame", Int, { }, bind(&Routines::getLoadFromSaveGame, this, _1, _2));
    add("EffectAssuredDeflection", Effect, { Int }, bind(&Routines::effectAssuredDeflection, this, _1, _2));
    add("GetName", String, { Object });
    add("GetLastSpeaker", Object, { });
    add("BeginConversation", Int, { String, Object });
    add("GetLastPerceived", Object, { });
    add("GetLastPerceptionHeard", Int, { });
    add("GetLastPerceptionInaudible", Int, { });
    add("GetLastPerceptionSeen", Int, { });
    add("GetLastClosedBy", Object, { });
    add("GetLastPerceptionVanished", Int, { });
    add("GetFirstInPersistentObject", Object, { Object, Int, Int });
    add("GetNextInPersistentObject", Object, { Object, Int, Int });
    add("GetAreaOfEffectCreator", Object, { Object });
    add("ShowLevelUpGUI", Int, { });
    add("SetItemNonEquippable", Void, { Object, Int });
    add("GetButtonMashCheck", Int, { });
    add("SetButtonMashCheck", Void, { Int });
    add("EffectForcePushTargeted", Effect, { Location, Int }, bind(&Routines::effectForcePushTargeted, this, _1, _2));
    add("EffectHaste", Effect, { }, bind(&Routines::effectHaste, this, _1, _2));
    add("GiveItem", Void, { Object, Object });
    add("ObjectToString", String, { Object });
    add("EffectImmunity", Effect, { Int }, bind(&Routines::effectImmunity, this, _1, _2));
    add("GetIsImmune", Int, { Object, Int, Object });
    add("EffectDamageImmunityIncrease", Effect, { Int, Int }, bind(&Routines::effectDamageImmunityIncrease, this, _1, _2));
    add("GetEncounterActive", Int, { Object });
    add("SetEncounterActive", Void, { Int, Object });
    add("GetEncounterSpawnsMax", Int, { Object });
    add("SetEncounterSpawnsMax", Void, { Int, Object });
    add("GetEncounterSpawnsCurrent", Int, { Object });
    add("SetEncounterSpawnsCurrent", Void, { Int, Object });
    add("GetModuleItemAcquired", Object, { });
    add("GetModuleItemAcquiredFrom", Object, { });
    add("SetCustomToken", Void, { Int, String });
    add("GetHasFeat", Int, { Int, Object });
    add("GetHasSkill", Int, { Int, Object }, bind(&Routines::getHasSkill, this, _1, _2));
    add("ActionUseFeat", Void, { Int, Object });
    add("ActionUseSkill", Void, { Int, Object, Int, Object });
    add("GetObjectSeen", Int, { Object, Object });
    add("GetObjectHeard", Int, { Object, Object });
    add("GetLastPlayerDied", Object, { });
    add("GetModuleItemLost", Object, { });
    add("GetModuleItemLostBy", Object, { });
    add("ActionDoCommand", Void, { Action }, bind(&Routines::actionDoCommand, this, _1, _2));
    add("EventConversation", Event, { });
    add("SetEncounterDifficulty", Void, { Int, Object });
    add("GetEncounterDifficulty", Int, { Object });
    add("GetDistanceBetweenLocations", Float, { Location, Location }, bind(&Routines::getDistanceBetweenLocations, this, _1, _2));
    add("GetReflexAdjustedDamage", Int, { Int, Object, Int, Int, Object });
    add("PlayAnimation", Void, { Int, Float, Float });
    add("TalentSpell", Talent, { Int });
    add("TalentFeat", Talent, { Int });
    add("TalentSkill", Talent, { Int });
    add("GetHasSpellEffect", Int, { Int, Object });
    add("GetEffectSpellId", Int, { Effect });
    add("GetCreatureHasTalent", Int, { Talent, Object });
    add("GetCreatureTalentRandom", Talent, { Int, Object, Int });
    add("GetCreatureTalentBest", Talent, { Int, Int, Object, Int, Int, Int });
    add("ActionUseTalentOnObject", Void, { Talent, Object });
    add("ActionUseTalentAtLocation", Void, { Talent, Location });
    add("GetGoldPieceValue", Int, { Object });
    add("GetIsPlayableRacialType", Int, { Object });
    add("JumpToLocation", Void, { Location }, bind(&Routines::jumpToLocation, this, _1, _2));
    add("EffectTemporaryHitpoints", Effect, { Int }, bind(&Routines::effectTemporaryHitpoints, this, _1, _2));
    add("GetSkillRank", Int, { Int, Object }, bind(&Routines::getSkillRank, this, _1, _2));
    add("GetAttackTarget", Object, { Object });
    add("GetLastAttackType", Int, { Object });
    add("GetLastAttackMode", Int, { Object });
    add("GetDistanceBetween2D", Float, { Object, Object }, bind(&Routines::getDistanceBetween2D, this, _1, _2));
    add("GetIsInCombat", Int, { Object, Int }, bind(&Routines::getIsInCombat, this, _1, _2));
    add("GetLastAssociateCommand", Int, { Object });
    add("GiveGoldToCreature", Void, { Object, Int });
    add("SetIsDestroyable", Void, { Int, Int, Int });
    add("SetLocked", Void, { Object, Int }, bind(&Routines::setLocked, this, _1, _2));
    add("GetLocked", Int, { Object }, bind(&Routines::getLocked, this, _1, _2));
    add("GetClickingObject", Object, { });
    add("SetAssociateListenPatterns", Void, { Object });
    add("GetLastWeaponUsed", Object, { Object });
    add("ActionInteractObject", Void, { Object });
    add("GetLastUsedBy", Object, { });
    add("GetAbilityModifier", Int, { Int, Object });
    add("GetIdentified", Int, { Object });
    add("SetIdentified", Void, { Object, Int });
    add("GetDistanceBetweenLocations2D", Float, { Location, Location }, bind(&Routines::getDistanceBetweenLocations2D, this, _1, _2));
    add("GetDistanceToObject2D", Float, { Object }, bind(&Routines::getDistanceToObject2D, this, _1, _2));
    add("GetBlockingDoor", Object, { });
    add("GetIsDoorActionPossible", Int, { Object, Int });
    add("DoDoorAction", Void, { Object, Int });
    add("GetFirstItemInInventory", Object, { Object }, bind(&Routines::getFirstItemInInventory, this, _1, _2));
    add("GetNextItemInInventory", Object, { Object }, bind(&Routines::getNextItemInInventory, this, _1, _2));
    add("GetClassByPosition", Int, { Int, Object }, bind(&Routines::getClassByPosition, this, _1, _2));
    add("GetLevelByPosition", Int, { Int, Object }, bind(&Routines::getLevelByPosition, this, _1, _2));
    add("GetLevelByClass", Int, { Int, Object }, bind(&Routines::getLevelByClass, this, _1, _2));
    add("GetDamageDealtByType", Int, { Int });
    add("GetTotalDamageDealt", Int, { });
    add("GetLastDamager", Object, { });
    add("GetLastDisarmed", Object, { });
    add("GetLastDisturbed", Object, { });
    add("GetLastLocked", Object, { });
    add("GetLastUnlocked", Object, { });
    add("EffectSkillIncrease", Effect, { Int, Int }, bind(&Routines::effectSkillIncrease, this, _1, _2));
    add("GetInventoryDisturbType", Int, { });
    add("GetInventoryDisturbItem", Object, { });
    add("ShowUpgradeScreen", Void, { Object, Object, Int, Int, String });
    add("VersusAlignmentEffect", Effect, { Effect, Int, Int });
    add("VersusRacialTypeEffect", Effect, { Effect, Int });
    add("VersusTrapEffect", Effect, { Effect });
    add("GetGender", Int, { Object }, bind(&Routines::getGender, this, _1, _2));
    add("GetIsTalentValid", Int, { Talent });
    add("ActionMoveAwayFromLocation", Void, { Location, Int, Float });
    add("GetAttemptedAttackTarget", Object, { });
    add("GetTypeFromTalent", Int, { Talent });
    add("GetIdFromTalent", Int, { Talent });
    add("PlayPazaak", Void, { Int, String, Int, Int, Object });
    add("GetLastPazaakResult", Int, { });
    add("DisplayFeedBackText", Void, { Object, Int });
    add("AddJournalQuestEntry", Void, { String, Int, Int });
    add("RemoveJournalQuestEntry", Void, { String });
    add("GetJournalEntry", Int, { String });
    add("PlayRumblePattern", Int, { Int });
    add("StopRumblePattern", Int, { Int });
    add("EffectDamageForcePoints", Effect, { Int }, bind(&Routines::effectDamageForcePoints, this, _1, _2));
    add("EffectHealForcePoints", Effect, { Int }, bind(&Routines::effectHealForcePoints, this, _1, _2));
    add("SendMessageToPC", Void, { Object, String });
    add("GetAttemptedSpellTarget", Object, { });
    add("GetLastOpenedBy", Object, { });
    add("GetHasSpell", Int, { Int, Object });
    add("OpenStore", Void, { Object, Object, Int, Int });
    add("ActionSurrenderToEnemies", Void, { });
    add("GetFirstFactionMember", Object, { Object, Int });
    add("GetNextFactionMember", Object, { Object, Int });
    add("ActionForceMoveToLocation", Void, { Location, Int, Float }, bind(&Routines::actionForceMoveToLocation, this, _1, _2));
    add("ActionForceMoveToObject", Void, { Object, Int, Float, Float }, bind(&Routines::actionForceMoveToObject, this, _1, _2));
    add("GetJournalQuestExperience", Int, { String });
    add("JumpToObject", Void, { Object, Int }, bind(&Routines::jumpToObject, this, _1, _2));
    add("SetMapPinEnabled", Void, { Object, Int });
    add("EffectHitPointChangeWhenDying", Effect, { Float }, bind(&Routines::effectHitPointChangeWhenDying, this, _1, _2));
    add("PopUpGUIPanel", Void, { Object, Int });
    add("AddMultiClass", Void, { Int, Object });
    add("GetIsLinkImmune", Int, { Object, Effect });
    add("EffectDroidStun", Effect, { }, bind(&Routines::effectDroidStun, this, _1, _2));
    add("EffectForcePushed", Effect, { }, bind(&Routines::effectForcePushed, this, _1, _2));
    add("GiveXPToCreature", Void, { Object, Int });
    add("SetXP", Void, { Object, Int });
    add("GetXP", Int, { Object });
    add("IntToHexString", String, { Int }, bind(&Routines::intToHexString, this, _1, _2));
    add("GetBaseItemType", Int, { Object });
    add("GetItemHasItemProperty", Int, { Object, Int });
    add("ActionEquipMostDamagingMelee", Void, { Object, Int });
    add("ActionEquipMostDamagingRanged", Void, { Object });
    add("GetItemACValue", Int, { Object });
    add("EffectForceResisted", Effect, { Object }, bind(&Routines::effectForceResisted, this, _1, _2));
    add("ExploreAreaForPlayer", Void, { Object, Object });
    add("ActionEquipMostEffectiveArmor", Void, { });
    add("GetIsDay", Int, { });
    add("GetIsNight", Int, { });
    add("GetIsDawn", Int, { });
    add("GetIsDusk", Int, { });
    add("GetIsEncounterCreature", Int, { Object });
    add("GetLastPlayerDying", Object, { });
    add("GetStartingLocation", Location, { });
    add("ChangeToStandardFaction", Void, { Object, Int }, bind(&Routines::changeToStandardFaction, this, _1, _2));
    add("SoundObjectPlay", Void, { Object }, bind(&Routines::soundObjectPlay, this, _1, _2));
    add("SoundObjectStop", Void, { Object }, bind(&Routines::soundObjectStop, this, _1, _2));
    add("SoundObjectSetVolume", Void, { Object, Int });
    add("SoundObjectSetPosition", Void, { Object, TVector });
    add("SpeakOneLinerConversation", Void, { String, Object });
    add("GetGold", Int, { Object });
    add("GetLastRespawnButtonPresser", Object, { });
    add("EffectForceFizzle", Effect, { }, bind(&Routines::effectForceFizzle, this, _1, _2));
    add("SetLightsaberPowered", Void, { Object, Int, Int, Int });
    add("GetIsWeaponEffective", Int, { Object, Int });
    add("GetLastSpellHarmful", Int, { });
    add("EventActivateItem", Event, { Object, Location, Object });
    add("MusicBackgroundPlay", Void, { Object });
    add("MusicBackgroundStop", Void, { Object });
    add("MusicBackgroundSetDelay", Void, { Object, Int });
    add("MusicBackgroundChangeDay", Void, { Object, Int, Int });
    add("MusicBackgroundChangeNight", Void, { Object, Int, Int });
    add("MusicBattlePlay", Void, { Object });
    add("MusicBattleStop", Void, { Object });
    add("MusicBattleChange", Void, { Object, Int });
    add("AmbientSoundPlay", Void, { Object });
    add("AmbientSoundStop", Void, { Object });
    add("AmbientSoundChangeDay", Void, { Object, Int });
    add("AmbientSoundChangeNight", Void, { Object, Int });
    add("GetLastKiller", Object, { });
    add("GetSpellCastItem", Object, { });
    add("GetItemActivated", Object, { });
    add("GetItemActivator", Object, { });
    add("GetItemActivatedTargetLocation", Location, { });
    add("GetItemActivatedTarget", Object, { });
    add("GetIsOpen", Int, { Object }, bind(&Routines::getIsOpen, this, _1, _2));
    add("TakeGoldFromCreature", Void, { Int, Object, Int });
    add("GetIsInConversation", Int, { Object });
    add("EffectAbilityDecrease", Effect, { Int, Int }, bind(&Routines::effectAbilityDecrease, this, _1, _2));
    add("EffectAttackDecrease", Effect, { Int, Int }, bind(&Routines::effectAttackDecrease, this, _1, _2));
    add("EffectDamageDecrease", Effect, { Int, Int }, bind(&Routines::effectDamageDecrease, this, _1, _2));
    add("EffectDamageImmunityDecrease", Effect, { Int, Int }, bind(&Routines::effectDamageImmunityDecrease, this, _1, _2));
    add("EffectACDecrease", Effect, { Int, Int, Int }, bind(&Routines::effectACDecrease, this, _1, _2));
    add("EffectMovementSpeedDecrease", Effect, { Int }, bind(&Routines::effectMovementSpeedDecrease, this, _1, _2));
    add("EffectSavingThrowDecrease", Effect, { Int, Int, Int }, bind(&Routines::effectSavingThrowDecrease, this, _1, _2));
    add("EffectSkillDecrease", Effect, { Int, Int }, bind(&Routines::effectSkillDecrease, this, _1, _2));
    add("EffectForceResistanceDecrease", Effect, { Int }, bind(&Routines::effectForceResistanceDecrease, this, _1, _2));
    add("GetPlotFlag", Int, { Object });
    add("SetPlotFlag", Void, { Object, Int });
    add("EffectInvisibility", Effect, { Int }, bind(&Routines::effectInvisibility, this, _1, _2));
    add("EffectConcealment", Effect, { Int }, bind(&Routines::effectConcealment, this, _1, _2));
    add("EffectForceShield", Effect, { Int }, bind(&Routines::effectForceShield, this, _1, _2));
    add("EffectDispelMagicAll", Effect, { Int }, bind(&Routines::effectDispelMagicAll, this, _1, _2));
    add("SetDialogPlaceableCamera", Void, { Int });
    add("GetSoloMode", Int, { });
    add("EffectDisguise", Effect, { Int }, bind(&Routines::effectDisguise, this, _1, _2));
    add("GetMaxStealthXP", Int, { });
    add("EffectTrueSeeing", Effect, { }, bind(&Routines::effectTrueSeeing, this, _1, _2));
    add("EffectSeeInvisible", Effect, { }, bind(&Routines::effectSeeInvisible, this, _1, _2));
    add("EffectTimeStop", Effect, { }, bind(&Routines::effectTimeStop, this, _1, _2));
    add("SetMaxStealthXP", Void, { Int });
    add("EffectBlasterDeflectionIncrease", Effect, { Int }, bind(&Routines::effectBlasterDeflectionIncrease, this, _1, _2));
    add("EffectBlasterDeflectionDecrease", Effect, { Int }, bind(&Routines::effectBlasterDeflectionDecrease, this, _1, _2));
    add("EffectHorrified", Effect, { }, bind(&Routines::effectHorrified, this, _1, _2));
    add("EffectSpellLevelAbsorption", Effect, { Int, Int, Int }, bind(&Routines::effectSpellLevelAbsorption, this, _1, _2));
    add("EffectDispelMagicBest", Effect, { Int }, bind(&Routines::effectDispelMagicBest, this, _1, _2));
    add("GetCurrentStealthXP", Int, { });
    add("GetNumStackedItems", Int, { Object }, bind(&Routines::getItemStackSize, this, _1, _2));
    add("SurrenderToEnemies", Void, { });
    add("EffectMissChance", Effect, { Int }, bind(&Routines::effectMissChance, this, _1, _2));
    add("SetCurrentStealthXP", Void, { Int });
    add("GetCreatureSize", Int, { Object });
    add("AwardStealthXP", Void, { Object });
    add("GetStealthXPEnabled", Int, { });
    add("SetStealthXPEnabled", Void, { Int });
    add("ActionUnlockObject", Void, { Object });
    add("ActionLockObject", Void, { Object });
    add("EffectModifyAttacks", Effect, { Int }, bind(&Routines::effectModifyAttacks, this, _1, _2));
    add("GetLastTrapDetected", Object, { Object });
    add("EffectDamageShield", Effect, { Int, Int, Int }, bind(&Routines::effectDamageShield, this, _1, _2));
    add("GetNearestTrapToObject", Object, { Object, Int });
    add("GetAttemptedMovementTarget", Object, { });
    add("GetBlockingCreature", Object, { Object });
    add("GetFortitudeSavingThrow", Int, { Object });
    add("GetWillSavingThrow", Int, { Object });
    add("GetReflexSavingThrow", Int, { Object });
    add("GetChallengeRating", Float, { Object });
    add("GetFoundEnemyCreature", Object, { Object });
    add("GetMovementRate", Int, { Object });
    add("GetSubRace", Int, { Object });
    add("GetStealthXPDecrement", Int, { });
    add("SetStealthXPDecrement", Void, { Int });
    add("DuplicateHeadAppearance", Void, { Object, Object });
    add("ActionCastFakeSpellAtObject", Void, { Int, Object, Int });
    add("ActionCastFakeSpellAtLocation", Void, { Int, Location, Int });
    add("CutsceneAttack", Void, { Object, Int, Int, Int });
    add("SetCameraMode", Void, { Object, Int });
    add("SetLockOrientationInDialog", Void, { Object, Int });
    add("SetLockHeadFollowInDialog", Void, { Object, Int });
    add("CutsceneMove", Void, { Object, TVector, Int });
    add("EnableVideoEffect", Void, { Int });
    add("StartNewModule", Void, { String, String, String, String, String, String, String, String }, bind(&Routines::startNewModule, this, _1, _2));
    add("DisableVideoEffect", Void, { });
    add("GetWeaponRanged", Int, { Object });
    add("DoSinglePlayerAutoSave", Void, { });
    add("GetGameDifficulty", Int, { });
    add("GetUserActionsPending", Int, { });
    add("RevealMap", Void, { TVector, Int });
    add("SetTutorialWindowsEnabled", Void, { Int });
    add("ShowTutorialWindow", Void, { Int });
    add("StartCreditSequence", Void, { Int });
    add("IsCreditSequenceInProgress", Int, { });
    add("SWMG_SetLateralAccelerationPerSecond", Void, { Float });
    add("SWMG_GetLateralAccelerationPerSecond", Float, { });
    add("GetCurrentAction", Int, { Object });
    add("GetDifficultyModifier", Float, { });
    add("GetAppearanceType", Int, { Object });
    add("FloatingTextStrRefOnCreature", Void, { Int, Object, Int });
    add("FloatingTextStringOnCreature", Void, { String, Object, Int });
    add("GetTrapDisarmable", Int, { Object });
    add("GetTrapDetectable", Int, { Object });
    add("GetTrapDetectedBy", Int, { Object, Object });
    add("GetTrapFlagged", Int, { Object });
    add("GetTrapBaseType", Int, { Object });
    add("GetTrapOneShot", Int, { Object });
    add("GetTrapCreator", Object, { Object });
    add("GetTrapKeyTag", String, { Object });
    add("GetTrapDisarmDC", Int, { Object });
    add("GetTrapDetectDC", Int, { Object });
    add("GetLockKeyRequired", Int, { Object });
    add("GetLockKeyTag", Int, { Object });
    add("GetLockLockable", Int, { Object });
    add("GetLockUnlockDC", Int, { Object });
    add("GetLockLockDC", Int, { Object });
    add("GetPCLevellingUp", Object, { });
    add("GetHasFeatEffect", Int, { Int, Object });
    add("SetPlaceableIllumination", Void, { Object, Int });
    add("GetPlaceableIllumination", Int, { Object });
    add("GetIsPlaceableObjectActionPossible", Int, { Object, Int });
    add("DoPlaceableObjectAction", Void, { Object, Int });
    add("GetFirstPC", Object, { }, bind(&Routines::getFirstPC, this, _1, _2));
    add("GetNextPC", Object, { }, bind(&Routines::getFirstPC, this, _1, _2));
    add("SetTrapDetectedBy", Int, { Object, Object });
    add("GetIsTrapped", Int, { Object });
    add("SetEffectIcon", Effect, { Effect, Int });
    add("FaceObjectAwayFromObject", Void, { Object, Object });
    add("PopUpDeathGUIPanel", Void, { Object, Int, Int, Int, String });
    add("SetTrapDisabled", Void, { Object });
    add("GetLastHostileActor", Object, { Object });
    add("ExportAllCharacters", Void, { });
    add("MusicBackgroundGetDayTrack", Int, { Object });
    add("MusicBackgroundGetNightTrack", Int, { Object });
    add("WriteTimestampedLogEntry", Void, { String });
    add("GetModuleName", String, { });
    add("GetFactionLeader", Object, { Object });

    add("SWMG_SetSpeedBlurEffect", Void, { Int, Float });

    add("EndGame", Void, { Int });
    add("GetRunScriptVar", Int, { }, bind(&Routines::getRunScriptVar, this, _1, _2));
    add("GetCreatureMovmentType", Int, { Object });
    add("AmbientSoundSetDayVolume", Void, { Object, Int });
    add("AmbientSoundSetNightVolume", Void, { Object, Int });
    add("MusicBackgroundGetBattleTrack", Int, { Object });
    add("GetHasInventory", Int, { Object });
    add("GetStrRefSoundDuration", Float, { Int });
    add("AddToParty", Void, { Object, Object });
    add("RemoveFromParty", Void, { Object });
    add("AddPartyMember", Int, { Int, Object }, bind(&Routines::addPartyMember, this, _1, _2));
    add("RemovePartyMember", Int, { Int }, bind(&Routines::removePartyMember, this, _1, _2));
    add("IsObjectPartyMember", Int, { Object }, bind(&Routines::isObjectPartyMember, this, _1, _2));
    add("GetPartyMemberByIndex", Object, { Int }, bind(&Routines::getPartyMemberByIndex, this, _1, _2));
    add("GetGlobalBoolean", Int, { String }, bind(&Routines::getGlobalBoolean, this, _1, _2));
    add("SetGlobalBoolean", Void, { String, Int }, bind(&Routines::setGlobalBoolean, this, _1, _2));
    add("GetGlobalNumber", Int, { String }, bind(&Routines::getGlobalNumber, this, _1, _2));
    add("SetGlobalNumber", Void, { String, Int }, bind(&Routines::setGlobalNumber, this, _1, _2));
    add("AurPostString", Void, { String, Int, Int, Float });

    add("SWMG_GetLastEvent", String, { });
    add("SWMG_GetLastEventModelName", String, { });
    add("SWMG_GetObjectByName", Object, { String });
    add("SWMG_PlayAnimation", Void, { Object, String, Int, Int, Int });
    add("SWMG_GetLastBulletHitDamage", Int, { });
    add("SWMG_GetLastBulletHitTarget", Int, { });
    add("SWMG_GetLastBulletHitShooter", Object, { });
    add("SWMG_AdjustFollowerHitPoints", Int, { Object, Int, Int });
    add("SWMG_OnBulletHit", Void, { });
    add("SWMG_OnObstacleHit", Void, { });
    add("SWMG_GetLastFollowerHit", Object, { });
    add("SWMG_GetLastObstacleHit", Object, { });
    add("SWMG_GetLastBulletFiredDamage", Int, { });
    add("SWMG_GetLastBulletFiredTarget", Int, { });
    add("SWMG_GetObjectName", String, { Object });
    add("SWMG_OnDeath", Void, { });
    add("SWMG_IsFollower", Int, { Object });
    add("SWMG_IsPlayer", Int, { Object });
    add("SWMG_IsEnemy", Int, { Object });
    add("SWMG_IsTrigger", Int, { Object });
    add("SWMG_IsObstacle", Int, { Object });
    add("SWMG_SetFollowerHitPoints", Void, { Object, Int });
    add("SWMG_OnDamage", Void, { });
    add("SWMG_GetLastHPChange", Int, { });
    add("SWMG_RemoveAnimation", Void, { Object, String });
    add("SWMG_GetCameraNearClip", Float, { });
    add("SWMG_GetCameraFarClip", Float, { });
    add("SWMG_SetCameraClip", Void, { Float, Float });
    add("SWMG_GetPlayer", Object, { });
    add("SWMG_GetEnemyCount", Int, { });
    add("SWMG_GetEnemy", Object, { Int });
    add("SWMG_GetObstacleCount", Int, { });
    add("SWMG_GetObstacle", Object, { Int });
    add("SWMG_GetHitPoints", Int, { Object });
    add("SWMG_GetMaxHitPoints", Int, { Object });
    add("SWMG_SetMaxHitPoints", Void, { Object, Int });
    add("SWMG_GetSphereRadius", Float, { Object });
    add("SWMG_SetSphereRadius", Void, { Object, Float });
    add("SWMG_GetNumLoops", Int, { Object });
    add("SWMG_SetNumLoops", Void, { Object, Int });
    add("SWMG_GetPosition", TVector, { Object });
    add("SWMG_GetGunBankCount", Int, { Object });
    add("SWMG_GetGunBankBulletModel", String, { Object, Int });
    add("SWMG_GetGunBankGunModel", String, { Object, Int });
    add("SWMG_GetGunBankDamage", Int, { Object, Int });
    add("SWMG_GetGunBankTimeBetweenShots", Float, { Object, Int });
    add("SWMG_GetGunBankLifespan", Float, { Object, Int });
    add("SWMG_GetGunBankSpeed", Float, { Object, Int });
    add("SWMG_GetGunBankTarget", Int, { Object, Int });
    add("SWMG_SetGunBankBulletModel", Void, { Object, Int, String });
    add("SWMG_SetGunBankGunModel", Void, { Object, Int, String });
    add("SWMG_SetGunBankDamage", Void, { Object, Int, Int });
    add("SWMG_SetGunBankTimeBetweenShots", Void, { Object, Int, Float });
    add("SWMG_SetGunBankLifespan", Void, { Object, Int, Float });
    add("SWMG_SetGunBankSpeed", Void, { Object, Int, Float });
    add("SWMG_SetGunBankTarget", Void, { Object, Int, Int });
    add("SWMG_GetLastBulletHitPart", String, { });
    add("SWMG_IsGunBankTargetting", Int, { Object, Int });
    add("SWMG_GetPlayerOffset", TVector, { });
    add("SWMG_GetPlayerInvincibility", Float, { });
    add("SWMG_GetPlayerSpeed", Float, { });
    add("SWMG_GetPlayerMinSpeed", Float, { });
    add("SWMG_GetPlayerAccelerationPerSecond", Float, { });
    add("SWMG_GetPlayerTunnelPos", TVector, { });
    add("SWMG_SetPlayerOffset", Void, { TVector });
    add("SWMG_SetPlayerInvincibility", Void, { Float });
    add("SWMG_SetPlayerSpeed", Void, { Float });
    add("SWMG_SetPlayerMinSpeed", Void, { Float });
    add("SWMG_SetPlayerAccelerationPerSecond", Void, { Float });
    add("SWMG_SetPlayerTunnelPos", Void, { TVector });
    add("SWMG_GetPlayerTunnelNeg", TVector, { });
    add("SWMG_SetPlayerTunnelNeg", Void, { TVector });
    add("SWMG_GetPlayerOrigin", TVector, { });
    add("SWMG_SetPlayerOrigin", Void, { TVector });
    add("SWMG_GetGunBankHorizontalSpread", Float, { Object, Int });
    add("SWMG_GetGunBankVerticalSpread", Float, { Object, Int });
    add("SWMG_GetGunBankSensingRadius", Float, { Object, Int });
    add("SWMG_GetGunBankInaccuracy", Float, { Object, Int });
    add("SWMG_SetGunBankHorizontalSpread", Void, { Object, Int, Float });
    add("SWMG_SetGunBankVerticalSpread", Void, { Object, Int, Float });
    add("SWMG_SetGunBankSensingRadius", Void, { Object, Int, Float });
    add("SWMG_SetGunBankInaccuracy", Void, { Object, Int, Float });
    add("SWMG_GetIsInvulnerable", Int, { Object });
    add("SWMG_StartInvulnerability", Void, { Object });
    add("SWMG_GetPlayerMaxSpeed", Float, { });
    add("SWMG_SetPlayerMaxSpeed", Void, { Float });

    add("AddJournalWorldEntry", Void, { Int, String, String });
    add("AddJournalWorldEntryStrref", Void, { Int, Int });
    add("BarkString", Void, { Object, Int, Int, Int });
    add("DeleteJournalWorldAllEntries", Void, { });
    add("DeleteJournalWorldEntry", Void, { Int });
    add("DeleteJournalWorldEntryStrref", Void, { Int });
    add("EffectForceDrain", Effect, { Int }, bind(&Routines::effectForceDrain, this, _1, _2));
    add("EffectPsychicStatic", Effect, { }, bind(&Routines::effectPsychicStatic, this, _1, _2));
    add("PlayVisualAreaEffect", Void, { Int, Location });
    add("SetJournalQuestEntryPicture", Void, { String, Object, Int, Int, Int });
    add("GetLocalBoolean", Int, { Object, Int }, bind(&Routines::getLocalBoolean, this, _1, _2));
    add("SetLocalBoolean", Void, { Object, Int, Int }, bind(&Routines::setLocalBoolean, this, _1, _2));
    add("GetLocalNumber", Int, { Object, Int }, bind(&Routines::getLocalNumber, this, _1, _2));
    add("SetLocalNumber", Void, { Object, Int, Int }, bind(&Routines::setLocalNumber, this, _1, _2));

    add("SWMG_GetSoundFrequency", Int, { Object, Int });
    add("SWMG_SetSoundFrequency", Void, { Object, Int, Int });
    add("SWMG_GetSoundFrequencyIsRandom", Int, { Object, Int });
    add("SWMG_SetSoundFrequencyIsRandom", Void, { Object, Int, Int });
    add("SWMG_GetSoundVolume", Int, { Object, Int });
    add("SWMG_SetSoundVolume", Void, { Object, Int, Int });

    add("SoundObjectGetPitchVariance", Float, { Object });
    add("SoundObjectSetPitchVariance", Void, { Object, Float });
    add("SoundObjectGetVolume", Int, { Object });
    add("GetGlobalLocation", Location, { String });
    add("SetGlobalLocation", Void, { String, Location });
    add("AddAvailableNPCByObject", Int, { Int, Object });
    add("RemoveAvailableNPC", Int, { Int });
    add("IsAvailableCreature", Int, { Int }, bind(&Routines::isAvailableCreature, this, _1, _2));
    add("AddAvailableNPCByTemplate", Int, { Int, String }, bind(&Routines::addAvailableNPCByTemplate, this, _1, _2));
    add("SpawnAvailableNPC", Object, { Int, Location });
    add("IsNPCPartyMember", Int, { Int }, bind(&Routines::isNPCPartyMember, this, _1, _2));
    add("ActionBarkString", Void, { Int });
    add("GetIsConversationActive", Int, { });
    add("EffectLightsaberThrow", Effect, { Object, Object, Object, Int }, bind(&Routines::effectLightsaberThrow, this, _1, _2));
    add("EffectWhirlWind", Effect, { }, bind(&Routines::effectWhirlWind, this, _1, _2));
    add("GetPartyAIStyle", Int, { });
    add("GetNPCAIStyle", Int, { Object });
    add("SetPartyAIStyle", Void, { Int });
    add("SetNPCAIStyle", Void, { Object, Int });
    add("SetNPCSelectability", Void, { Int, Int });
    add("GetNPCSelectability", Int, { Int });
    add("ClearAllEffects", Void, { });
    add("GetLastConversation", String, { });
    add("ShowPartySelectionGUI", Void, { String, Int, Int, Int }, bind(&Routines::showPartySelectionGUI, this, _1, _2));
    add("GetStandardFaction", Int, { Object }, bind(&Routines::getStandardFaction, this, _1, _2));
    add("GivePlotXP", Void, { String, Int });
    add("GetMinOneHP", Int, { Object }, bind(&Routines::getMinOneHP, this, _1, _2));
    add("SetMinOneHP", Void, { Object, Int }, bind(&Routines::setMinOneHP, this, _1, _2));

    add("SWMG_GetPlayerTunnelInfinite", TVector, { });
    add("SWMG_SetPlayerTunnelInfinite", Void, { TVector });

    add("SetGlobalFadeIn", Void, { Float, Float, Float, Float, Float });
    add("SetGlobalFadeOut", Void, { Float, Float, Float, Float, Float });
    add("GetLastHostileTarget", Object, { Object });
    add("GetLastAttackAction", Int, { Object });
    add("GetLastForcePowerUsed", Int, { Object });
    add("GetLastCombatFeatUsed", Int, { Object });
    add("GetLastAttackResult", Int, { Object });
    add("GetWasForcePowerSuccessful", Int, { Object });
    add("GetFirstAttacker", Object, { Object });
    add("GetNextAttacker", Object, { Object });
    add("SetFormation", Void, { Object, Object, Int, Int });
    add("ActionFollowLeader", Void, { });
    add("SetForcePowerUnsuccessful", Void, { Int, Object });
    add("GetIsDebilitated", Int, { Object });
    add("PlayMovie", Void, { String, Int });
    add("SaveNPCState", Void, { Int });
    add("GetCategoryFromTalent", Int, { Talent });
    add("SurrenderByFaction", Void, { Int, Int });
    add("ChangeFactionByFaction", Void, { Int, Int });
    add("PlayRoomAnimation", Void, { String, Int });
    add("ShowGalaxyMap", Void, { Int });
    add("SetPlanetSelectable", Void, { Int, Int });
    add("GetPlanetSelectable", Int, { Int });
    add("SetPlanetAvailable", Void, { Int, Int });
    add("GetPlanetAvailable", Int, { Int });
    add("GetSelectedPlanet", Int, { });
    add("SoundObjectFadeAndStop", Void, { Object, Float });
    add("SetAreaFogColor", Void, { Object, Float, Float, Float });
    add("ChangeItemCost", Void, { String, Float });
    add("GetIsLiveContentAvailable", Int, { Int });
    add("ResetDialogState", Void, { });
    add("SetGoodEvilValue", Void, { Object, Int });
    add("GetIsPoisoned", Int, { Object });
    add("GetSpellTarget", Object, { Object });
    add("SetSoloMode", Void, { Int });
    add("EffectCutSceneHorrified", Effect, { }, bind(&Routines::effectCutSceneHorrified, this, _1, _2));
    add("EffectCutSceneParalyze", Effect, { }, bind(&Routines::effectCutSceneParalyze, this, _1, _2));
    add("EffectCutSceneStunned", Effect, { }, bind(&Routines::effectCutSceneStunned, this, _1, _2));
    add("CancelPostDialogCharacterSwitch", Void, { });
    add("SetMaxHitPoints", Void, { Object, Int }, bind(&Routines::setMaxHitPoints, this, _1, _2));
    add("NoClicksFor", Void, { Float });
    add("HoldWorldFadeInForDialog", Void, { });
    add("ShipBuild", Int, { }, bind(&Routines::shipBuild, this, _1, _2));
    add("SurrenderRetainBuffs", Void, { });
    add("SuppressStatusSummaryEntry", Void, { Int });
    add("GetCheatCode", Int, { Int });
    add("SetMusicVolume", Void, { Float });
    add("CreateItemOnFloor", Object, { String, Location, Int });
    add("SetAvailableNPCId", Void, { Int, Object });
    add("GetScriptParameter", Int, { Int });
    add("SetFadeUntilScript", Void, { });
    add("EffectForceBody", Effect, { Int }, bind(&Routines::effectForceBody, this, _1, _2));
    add("GetItemComponent", Int, { });
    add("GetItemComponentPieceValue", Int, { });
    add("ShowChemicalUpgradeScreen", Void, { Object });
    add("GetChemicals", Int, { });
    add("GetChemicalPieceValue", Int, { });
    add("GetSpellForcePointCost", Int, { });
    add("EffectFury", Effect, { }, bind(&Routines::effectFury, this, _1, _2));
    add("EffectBlind", Effect, { }, bind(&Routines::effectBlind, this, _1, _2));
    add("EffectFPRegenModifier", Effect, { Int }, bind(&Routines::effectFPRegenModifier, this, _1, _2));
    add("EffectVPRegenModifier", Effect, { Int }, bind(&Routines::effectVPRegenModifier, this, _1, _2));
    add("EffectCrush", Effect, { }, bind(&Routines::effectCrush, this, _1, _2));

    add("SWMG_GetSwoopUpgrade", Int, { Int });

    add("GetFeatAcquired", Int, { Int, Object });
    add("GetSpellAcquired", Int, { Int, Object });
    add("ShowSwoopUpgradeScreen", Void, { });
    add("GrantFeat", Void, { Int, Object });
    add("GrantSpell", Void, { Int, Object });
    add("SpawnMine", Void, { Int, Location, Int, Int, Object });

    add("SWMG_GetTrackPosition", TVector, { Object });
    add("SWMG_SetFollowerPosition", TVector, { TVector });

    add("SetFakeCombatState", Void, { Object, Int });

    add("SWMG_DestroyMiniGameObject", Void, { Object });

    add("GetOwnerDemolitionsSkill", Int, { Object });
    add("SetOrientOnClick", Void, { Object, Int });
    add("GetInfluence", Int, { Int });
    add("SetInfluence", Void, { Int, Int });
    add("ModifyInfluence", Void, { Int, Int });
    add("GetRacialSubType", Int, { Object });
    add("IncrementGlobalNumber", Void, { String, Int });
    add("DecrementGlobalNumber", Void, { String, Int });
    add("SetBonusForcePoints", Void, { Object, Int });
    add("AddBonusForcePoints", Void, { Object, Int });
    add("GetBonusForcePoints", Void, { Object });

    add("SWMG_SetJumpSpeed", Void, { Float });

    add("IsMoviePlaying", Int, { });
    add("QueueMovie", Void, { String, Int });
    add("PlayMovieQueue", Void, { Int });
    add("YavinHackDoorClose", Void, { Object });
    add("EffectDroidConfused", Effect, { }, bind(&Routines::effectDroidConfused, this, _1, _2));
    add("IsStealthed", Int, { Object });
    add("IsMeditating", Int, { Object });
    add("IsInTotalDefense", Int, { Object });
    add("SetHealTarget", Void, { Object, Object });
    add("GetHealTarget", Object, { Object });
    add("GetRandomDestination", TVector, { Object, Int });
    add("IsFormActive", Int, { Object, Int });
    add("GetSpellFormMask", Int, { Int });
    add("GetSpellBaseForcePointCost", Int, { Int });
    add("SetKeepStealthInDialog", Void, { Int });
    add("HasLineOfSight", Int, { TVector, TVector, Object, Object });
    add("ShowDemoScreen", Int, { String, Int, Int, Int, Int });
    add("ForceHeartbeat", Void, { Object });
    add("EffectForceSight", Effect, { }, bind(&Routines::effectForceSight, this, _1, _2));
    add("IsRunning", Int, { Object });

    add("SWMG_PlayerApplyForce", Void, { TVector });

    add("SetForfeitConditions", Void, { Int });
    add("GetLastForfeitViolation", Int, { });
    add("ModifyReflexSavingThrowBase", Void, { Object, Int });
    add("ModifyFortitudeSavingThrowBase", Void, { Object, Int });
    add("ModifyWillSavingThrowBase", Void, { Object, Int });
    add("GetScriptStringParameter", String, { });
    add("GetObjectPersonalSpace", Float, { Object });
    add("AdjustCreatureAttributes", Void, { Object, Int, Int });
    add("SetCreatureAILevel", Void, { Object, Int });
    add("ResetCreatureAILevel", Void, { Object });
    add("AddAvailablePUPByTemplate", Int, { Int, String });
    add("AddAvailablePUPByObject", Int, { Int, Object });
    add("AssignPUP", Int, { Int, Int });
    add("SpawnAvailablePUP", Object, { Int, Location });
    add("AddPartyPuppet", Int, { Int, Object });
    add("GetPUPOwner", Object, { Object });
    add("GetIsPuppet", Int, { Object });
    add("ActionFollowOwner", Void, { Float });
    add("GetIsPartyLeader", Int, { Object });
    add("GetPartyLeader", Object, { });
    add("RemoveNPCFromPartyToBase", Int, { Int });
    add("CreatureFlourishWeapon", Void, { Object });
    add("EffectMindTrick", Effect, { }, bind(&Routines::effectMindTrick, this, _1, _2));
    add("EffectFactionModifier", Effect, { Int }, bind(&Routines::effectFactionModifier, this, _1, _2));
    add("ChangeObjectAppearance", Void, { Object, Int });
    add("GetIsXBox", Int, { });
    add("EffectDroidScramble", Effect, { }, bind(&Routines::effectDroidScramble, this, _1, _2));
    add("ActionSwitchWeapons", Void, { });
    add("PlayOverlayAnimation", Void, { Object, Int });
    add("UnlockAllSongs", Void, { });
    add("DisableMap", Void, { Int });
    add("DetonateMine", Void, { Object });
    add("DisableHealthRegen", Void, { Int });
    add("SetCurrentForm", Void, { Object, Int });
    add("SetDisableTransit", Void, { Int });
    add("SetInputClass", Void, { Int });
    add("SetForceAlwaysUpdate", Void, { Object, Int });
    add("EnableRain", Void, { Int });
    add("DisplayMessageBox", Void, { Int, String });
    add("DisplayDatapad", Void, { Object });
    add("RemoveHeartbeat", Void, { Object });
    add("RemoveEffectByID", Void, { Object, Int });
    add("RemoveEffectByExactMatch", Void, { Object, Effect });
    add("AdjustCreatureSkills", Void, { Object, Int, Int });
    add("GetSkillRankBase", Int, { Int, Object });
    add("EnableRendering", Void, { Object, Int });
    add("GetCombatActionsPending", Int, { Object });
    add("SaveNPCByObject", Void, { Int, Object });
    add("SavePUPByObject", Void, { Int, Object });
    add("GetIsPlayerMadeCharacter", Int, { Object });
    add("RebuildPartyTable", Void, { });
}

} // namespace game

} // namespace reone
